// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "default"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

model User {
  id                     String                   @id @unique @default(uuid())
  email                  String                   @unique
  firstName              String
  lastName               String
  avatarUrl              String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  trainings              Training[]
  assignedTrainings      TrainingAssignee[]
  organizationMembership OrganizationMembership[]
  userQuestionResponse   UserQuestionResponse[]
}

model Organization {
  id          String                   @id @unique @default(uuid())
  name        String                   @unique
  avatarUrl   String?
  memberships OrganizationMembership[]
  trainings   Training[]
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
}

model OrganizationMembership {
  id             String         @id @unique @default(uuid())
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  userId         String
  user           User           @relation(fields: [userId], references: [id])
  role           MembershipRole
}

enum MembershipRole {
  USER
  ADMINISTRATOR
  COLLABORATOR
  VIEWER
}

model Training {
  id                  String             @id @unique @default(uuid())
  name                String
  description         String?
  authorId            String
  author              User               @relation(fields: [authorId], references: [id])
  organizationId      String
  organization        Organization       @relation(fields: [organizationId], references: [id])
  competencyThreshold Int
  maxNumHours         Float
  assignees           TrainingAssignee[]
  deadline            DateTime
  questions           Question[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model TrainingAssignee {
  id         String         @id @unique @default(uuid())
  status     TrainingStatus
  trainingId String
  training   Training       @relation(fields: [trainingId], references: [id])
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  score      Float?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

enum TrainingStatus {
  NOT_STARTED
  STARTED
  COMPLETED
}

model Question {
  id         String                 @id @unique @default(uuid())
  title      String
  training   Training               @relation(fields: [trainingId], references: [id])
  trainingId String
  answers    Answer[]
  format     QuestionFormat
  responses  UserQuestionResponse[]
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
}

enum QuestionFormat {
  MULTIPLE_CHOICE
  TRUE_OR_FALSE
}

model Answer {
  id                   String                 @id @unique @default(uuid())
  title                String
  questionId           String
  question             Question               @relation(fields: [questionId], references: [id])
  isCorrect            Boolean
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  userQuestionResponse UserQuestionResponse[]
}

model UserQuestionResponse {
  id         String    @id @unique @default(uuid())
  answerId   String
  answer     Answer    @relation(fields: [answerId], references: [id])
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  questionId String?
  question   Question? @relation(fields: [questionId], references: [id])
}
